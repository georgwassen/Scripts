#!/bin/bash
#===============================================================================
#
#          FILE:  bibgrep
# 
#         USAGE:  ./bibgrep [-h|--help] <regex> [-e] 
# 
#   DESCRIPTION:  searches BIB files (BibLaTeX) for regex and displays the entire entry
#                 Parameters:   -h/--help    show usage
#                               -e           open BIB file in gvim at line matching the first regex
# 
#  REQUIREMENTS:  ---
#          BUGS:  ---
#         NOTES:  ---
#        AUTHOR:  Georg Wassen (georg.wassen@googlemail.com), 
#       COMPANY:  
#       VERSION:  1.0
#       CREATED:  19.09.2013 08:44:11
#      REVISION:  ---
#===============================================================================


TERM=$1
shift

if [[ $TERM = -h || $TERM = --help || ! $TERM ]]; then
    echo "Grep in *.bib files (only key)"
    echo "Prints entire bib entries."
    echo "The last found BIB key is put in the clipboard buffer."
    echo "Usage:"
    echo "  $(basename $0) [-h] TERM"
    echo "  (TERM may use egrep regular expressions)"
    echo "  e.g.: $0 Pellizzoni[0-9]*Predictable"
    echo "  Parameters: "
    echo "    -e   Open found places in gvim"
    exit
fi

while [[ $# -ge 1 ]]; do
    if [[ $1 = '-e' ]]; then
        PARAM_EDIT="gvim -p "
    fi
    shift
done

PARAM_FULLTEXT=1

# check, if there are *.bib files in the current directory
if [[ $(ls *.bib 2> /dev/null | wc -l) -eq 0 ]]; then 
    # no *.bib files in $PWD
    # find bib files used by BibLaTeX
    FILES=$(sed -n 's/\\addbibresource{\([^}]\+\)}/\1/p' *.tex)
    # TODO : if using BibTeX, use other regex to extract BIB files...
else
    FILES=*.bib
fi

function print_key() {
  IFS_BAK=$IFS
  local FILE POS LINE

  #echo "ARGS='$@'"

  IFS=:
  read  FILE POS LINE <<< "$@"
  IFS=$IFS_BAK

  #echo "FILE='$FILE'"
  #echo "POS='$POS'"
  #echo "LINE='$LINE'"

    # write file and line
    echo -e "\033[1;33m$FILE\033[0m:$POS"

    sed -n $POS',/^}$/p' $FILE | egrep --color=always -e '' -e $TERM
    # sed: search from position (line number) up to the next line containing only /}/
    # (my bib files are usually formatted accordingly)
    # egrep: used to highlight the search term
    # (first -e: show every line, second -e: highligh $TERM)

    # extract bib key from $LINE
    if [[ $LINE =~ \{([^,]*), ]]; then
        KEY=${BASH_REMATCH[1]}
        #echo "KEY='$KEY'"

        # put it in the clipboard buffer
        echo -n "$KEY" | xsel -b
    fi

    if [[ "$PARAM_EDIT" ]]; then
        PARAM_EDIT="$PARAM_EDIT $FILE +$POS "
        #echo $PARAM_EDIT
    fi

}

if [[ $PARAM_FULLTEXT -eq 1 ]]; then
    for FILE in $FILES; do
        POS=0
        while read LINE; do
            POS=$(( POS + 1 ))
            if [[ $LINE =~ ^@[^{]+\{([^,]+),$ ]]; then
                CURRENT_KEY=${BASH_REMATCH[1]}
                CURRENT_POS=$POS
            fi
            if [[ $LINE =~ $TERM ]]; then
                echo "$FILE:$CURRENT_POS:$CURRENT_KEY"
            fi
        done < $FILE | sort -t: -k3 -u | while read LINE; do
            print_key $LINE
        done
    done
else
    while read LINE; do
        print_key $LINE
    done < <(echo $FILES |xargs egrep -n "@.*{.*$TERM.*,")
fi

# open in gvim (if that parameter was given)
if [[ "$PARAM_EDIT" ]]; then
    echo "$PARAM_EDIT"
    $PARAM_EDIT
fi

