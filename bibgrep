#!/bin/bash
#===============================================================================
#
#          FILE:  bibgrep
# 
#         USAGE:  ./bibgrep [-h|--help] <regex> [-e] 
# 
#   DESCRIPTION:  searches BIB files (BibLaTeX) for regex and displays the entire entry
#                 Parameters:   -h/--help    show usage
#                               -e           open BIB file in gvim at line matching the first regex
# 
#  REQUIREMENTS:  ---
#          BUGS:  ---
#         NOTES:  ---
#        AUTHOR:  Georg Wassen (georg.wassen@googlemail.com), 
#       COMPANY:  
#       VERSION:  1.0
#       CREATED:  19.09.2013 08:44:11
#      REVISION:  ---
#===============================================================================

function usage() {
    echo
    echo "Grep in *.bib files (only key)"
    echo "Prints entire bib entries."
    echo "The last found BIB key is put in the clipboard buffer."
    echo "Usage:"
    echo "  $(basename $0) [parameters] <regex>"
    echo "    (may use egrep regular expressions)"
    echo "    e.g.: $(basename $0) Pellizzoni[0-9]*Predictable"
    echo "  Parameters: "
    echo "    -e  --edit       Open found places in gvim"
    echo "    -f  --fulltext   Do a fulltext search (not just in bib keys)"
    echo "    -h  --help       Show this help"
    echo "    -s  --filesearch Search for PDF file (optionally provide path)"
    echo "    -o  --open       Open PDF (implies -s)"
    echo "    -q  --quiet      Don't show full entries, only bib keys"
    echo
}

if [[ $# -eq 0 ]]; then
    usage
    exit
fi

ARGS=$(getopt -o 'efhs::oq' -l 'help,edit,fulltext,filesearch,open::,quiet' -- "$@")   # parse parameters and store normalized string in $ARGS
eval set -- "$ARGS";                           # set parameters to preprocessed string $ARGS

PARAM_FULLTEXT=0
PARAM_EDIT=''
PARAM_FILESEARCH=''
FILESEARCH_DEFAULTPATH=$HOME/Dokumente/Dokumentation
PARAM_OPEN=0
PARAM_QUIET=0

while [[ $# -gt 0 ]]; do
    #echo "1='$1'"
    case "$1" in
        -h|--help)
            usage
            exit
            ;;
        -e|--edit)
            PARAM_EDIT="gvim -p "
            ;;
        -f|--fulltext)
            PARAM_FULLTEXT=1
            ;;
        -o|--open)
            PARAM_OPEN=1
            if [[ -z $PARAM_FILESEARCH ]]; then
                PARAM_FILESEARCH=$FILESEARCH_DEFAULTPATH
            fi
            ;;
        -q|--quiet)
            PARAM_QUIET=1
            ;;
        -s|--filesearch)
            if [[ $2 ]]; then
                PARAM_FILESEARCH=$2
            else
                PARAM_FILESEARCH=$FILESEARCH_DEFAULTPATH
            fi
            ;;
        --)
            # ignore
            ;;
        *)
            # set as search term
            PARAM_TERM="$1"
            ;;
    esac
    shift
done

#echo "PARAM_TERM='$PARAM_TERM'"
#echo "PARAM_OPEN='$PARAM_OPEN'"
#echo "PARAM_FILESEARCH='$PARAM_FILESEARCH'"

# check, if there are *.bib files in the current directory
if [[ $(ls *.bib 2> /dev/null | wc -l) -eq 0 ]]; then 
    # no *.bib files in $PWD
    # find bib files used by BibLaTeX
    FILES=$(sed -n 's/\\addbibresource{\([^}]\+\)}/\1/p' *.tex)
    # TODO : if using BibTeX, use other regex to extract BIB files...
else
    FILES=*.bib
fi

function print_key() {
  IFS_BAK=$IFS
  local FILE POS LINE

  #echo "ARGS='$@'"

  IFS=:
  read  FILE POS LINE <<< "$@"
  IFS=$IFS_BAK

  #echo "FILE='$FILE'"
  #echo "POS='$POS'"
  #echo "LINE='$LINE'"

    # extract bib key from $LINE
    if [[ $LINE =~ \{([^,]*), ]]; then
        KEY=${BASH_REMATCH[1]}
        #echo "KEY='$KEY'"

        # put it in the clipboard buffer
        echo -n "$KEY" | xsel -b
    fi

    # write file and line and bibkey
    echo -e "\033[1;33m$FILE\033[0m:$POS:\033[1;34m$KEY\033[0m"

    if [[ $PARAM_QUIET -ne 1 ]]; then

        sed -n $POS',/^}$/p' $FILE | egrep --color=always -e '' -e $PARAM_TERM
        # sed: search from position (line number) up to the next line containing only /}/
        # (my bib files are usually formatted accordingly)
        # egrep: used to highlight the search term
        # (first -e: show every line, second -e: highligh $PARAM_TERM)

    fi


    if [[ "$PARAM_EDIT" ]]; then
        PARAM_EDIT="$PARAM_EDIT $FILE +$POS "
        #echo $PARAM_EDIT
    fi

    if [[ "$PARAM_FILESEARCH" ]]; then
        #extend KEY with _ (like often used in file names)
        if [[ $KEY =~ ([A-Za-z]*)([0-9]{4})([A-Za-z]*) ]]; then
            KEY2=${BASH_REMATCH[1]}_${BASH_REMATCH[2]}_${BASH_REMATCH[3]}
        else
            KEY2=ZZZ
        fi

        #echo "begin filesearch '${KEY}.pdf' '${KEY2}.pdf'"
        find "$PARAM_FILESEARCH" \( -name "${KEY}*" -or -name "${KEY2}*" \) -printf "\033[1;37m%p\033[0m\n"
        #echo "end filesearch"

        if [[ $PARAM_OPEN -eq 1 ]]; then
            # parameter -o/--open provided: open PDF
            FILES=$(find "$PARAM_FILESEARCH"  -name "${KEY}*" -or -name "${KEY2}*"  )
            CNT=$(echo "$FILES" | wc -l)
            if [[ $CNT -eq 0 ]]; then
                echo "No matching file found in '$PARAM_FILESEARCH'"
            elif [[ $CNT -eq 1 ]]; then
                open $FILES
            else 
                echo "Found more than one file, opening first one"
                open $(echo "$FILES" | head -n1)
            fi
        fi
    fi

}

if [[ $PARAM_FULLTEXT -eq 1 ]]; then
    for FILE in $FILES; do
        POS=0
        while read LINE; do
            POS=$(( POS + 1 ))
            if [[ $LINE =~ ^@[^{]+\{([^,]+),$ ]]; then
                CURRENT_KEY=${BASH_REMATCH[1]}
                CURRENT_POS=$POS
                CURRENT_LINE=$LINE
            fi
            if [[ $LINE =~ $PARAM_TERM ]]; then
                echo "$FILE:$CURRENT_POS:$CURRENT_LINE"
            fi
        done < $FILE | sort -t: -k3 -u | while read LINE; do
            print_key $LINE
        done
    done
else
    while read LINE; do
        print_key $LINE
    done < <(echo $FILES |xargs egrep -n "@.*{.*$PARAM_TERM.*,")
fi

# open in gvim (if that parameter was given)
if [[ "$PARAM_EDIT" ]]; then
    echo "$PARAM_EDIT"
    $PARAM_EDIT
fi

